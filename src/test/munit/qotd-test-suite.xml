<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<munit:config name="qotd-test-suite.xml" />
	<munit:before-test name="qotd-test-suiteBefore_Test" description="Before tests actions" doc:id="291153c8-9659-4025-862a-3394933fe113" >
		<ee:transform doc:name="Set Transaction Id" doc:id="99c74b39-907c-45f7-9d6a-1e82cedb465d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="txnId" ><![CDATA[%dw 2.0
output application/json
---
uuid()]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</munit:before-test>
	<munit:test name="ValidCompressedTranslationTest" description="Test" doc:id="af89865f-0f86-4cf7-a5df-449e0234c1ae" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when Translator API is called" doc:id="c096a0d6-e810-4185-8be5-1a1411b968a4" processor="http:request">
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0
output application/json
---
{
    "code": 200,
    "lang": "en-ru",
    "text": [
        "Не давайте то, что нельзя вмешиваться в то, что вы можете сделать."
    ]
}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<ee:transform doc:name="Set Mock Payload" doc:id="1133e8e8-a74d-485a-a1f3-0f08f8f1a40d" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
"en-ru"]]></ee:set-payload>
				</ee:message>
				<ee:variables >
					<ee:set-variable variableName="message" ><![CDATA[%dw 2.0
output application/json
---
"Do not let what you cannot do interfere with what you can do."]]></ee:set-variable>
					<ee:set-variable variableName="quote" ><![CDATA[%dw 2.0
output application/json
---
{
                "quote": "Do not let what you cannot do interfere with what you can do.",
                "author": "Martina Navratilova",
                "length": "179",
                "tags": [
                    "barriers",
                    "inspire",
                    "sports"
                ],
                "category": "inspire",
                "title": "Inspiring Quote of the day",
                "date": "2019-01-09",
                "id": null
            }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<flow-ref doc:name="Flow-ref to quote-of-the-day:\get-compressed-translation:flow" doc:id="2c23cac9-058b-4d51-85ec-f71139ab00d5" name="quote-of-the-day:\get-compressed-translation:flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that compressed translation equals expected" doc:id="05cf25c4-7e69-46cf-9b54-1b02f41473fd" expression="#[payload.message]" is='#[MunitTools::equalTo("Недавайтето,чтонельзявмешиватьсявто,чтовыможетесделать.")]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="ValidGetQuoteOfTheDayTest" description="MUnit Test" doc:id="cda7337e-a25b-40fe-89fc-1d3aca3485a5" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when qotd service is called" doc:id="5209f491-3e9e-44a9-b3d0-bdc34d87fff3" processor="http:request">
				<munit-tools:with-attributes>
				<munit-tools:with-attribute attributeName="doc:name" whereValue="HTTP GET Quote Of The Day" />
			</munit-tools:with-attributes>
			<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="quote" value='#[%dw 2.0
output application/json
---
{
   "quote":"Do not let what you cannot do interfere with what you can do",
   "author":"John Wooden",
   "length":"179",
   "tags":[
      "barriers",
      "inspire",
      "sports"
   ],
   "category":"inspire",
   "title":"Inspiring Quote of the day",
   "date":"2019-01-10",
   "id":null
}]' mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name='quote-of-the-day:\get-quote-of-the-day:flow' doc:id="2da4e3d5-78d1-4e83-b82e-0e88801400b2" name="quote-of-the-day:\get-quote-of-the-day:flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that quote variable is not null" doc:id="81cdc0fe-1f1a-434f-8825-4306e90387a8" expression="#[vars.quote]" is="#[MunitTools::notNullValue()]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="QotdServiceDownTest" description="MUnit Test" doc:id="efa33349-a008-4901-8de2-d3090d982335" >
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when Qotd Service Is Called Throw ConnectionException" doc:id="d7010d22-2b2d-4188-b3ba-ff58dfc629d8" processor="http:request">
				<munit-tools:then-return >
					<munit-tools:error cause="#[java!org::mule::runtime::api::connection::ConnectionException::new('MyMessage')]"/>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="quote-of-the-day:\get-quote-of-the-day:flow" doc:id="1c1a5095-e158-4413-96ce-066de8ad6a60" name="quote-of-the-day:\process-quote:flow"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that Custom Error Message Equals Expected" doc:id="3246fc20-19f1-426d-b626-0bfd708fa36b" expression="#[payload.message]" is='#[MunitTools::equalTo("Cannot connect to quotes service! Try again later!")]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="QotdLimitReachedTest" description="MUnit Test" doc:id="28b143b0-2ef7-4848-bec8-3044a861eb06" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when Qotd Service Is Called Throw Too Many Requests" doc:id="8fd5c2f9-9578-473f-bfdc-bc63e6f06154" processor="http:request">
				<munit-tools:then-return >
					<munit-tools:error typeId='HTTP:TOO_MANY_REQUESTS' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="a0b188bd-82db-4924-bb20-60bb50c6f7a6" name="quote-of-the-day:\process-quote:flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="quote-of-the-day:\get-quote-of-the-day:flow" doc:id="19e13f2e-c452-4cc5-8549-ff12e84d4028" expression="#[payload.message]" is='#[MunitTools::equalTo("Quote retrieval Limit per hour reached (10 quotes/hour)! Please Try again later.")]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="ValidFileWriteOrigQuoteTest" description="MUnit Test" doc:id="04f6216e-62e3-449a-af4a-ebd4d0725eeb" >
		<munit:execution >
	
			<ee:transform doc:name="Set Test Variables" doc:id="6007e933-99f8-4ae3-9336-5239033ca60d" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
				</ee:message>
				<ee:variables >
					<ee:set-variable variableName="quote" ><![CDATA[%dw 2.0
output application/json
---
{
   "quote":"Do not let what you cannot do interfere with what you can do.",
   "author":"John Wooden",
   "length":"179",
   "tags":[
      "barriers",
      "inspire",
      "sports"
   ],
   "category":"inspire",
   "title":"Inspiring Quote of the day",
   "date":"2019-01-10",
   "id":null
}]]></ee:set-variable>
					<ee:set-variable variableName="fileName" ><![CDATA[%dw 2.0
output application/json
---
'QOTD_' ++ now() as String{format: "MMDDYYYY"} ++ '.txt']]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<flow-ref doc:name="quote-of-the-day:\write-original-quote-to-file:subflow" doc:id="642e4028-dd65-4084-8a18-5f646a54fa2e" name="quote-of-the-day:\write-original-quote-to-file:subflow"/>
			<file:read doc:name="Read File" doc:id="42241ffc-d690-4a4f-80bf-a3424d929415" config-ref="default_directory" path="#[vars.fileName]"/>
			<ee:transform doc:name="Set File Contents As Payload" doc:id="b9ed43e6-0114-4b3f-818c-0a746b4477cb" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that File Contents equals Expected" doc:id="9a69e581-74ee-49c3-9bc6-1b3b84b71599" expression="#[payload]" is='#[MunitTools::equalTo("Do not let what you cannot do interfere with what you can do. John Wooden 2019-01-10\n")]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="UnauthorizedTranlastorApiCallTest" description="MUnit Test" doc:id="a98ebf76-5955-49b3-9f24-1ab4634ce4cb" >
		<munit:behavior >
					<munit-tools:mock-when doc:name="Mock when qotd service is called" doc:id="7d979063-2ea0-42eb-867a-436a72354a68" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="HTTP GET Quote Of The Day" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0
output application/json
---
{
   "success":{
      "total":1
   },
   "contents":{
      "quotes":[
         {
            "quote":"Do not let what you cannot do interfere with what you can do",
            "author":"John Wooden",
            "length":"179",
            "tags":[
               "barriers",
               "inspire",
               "sports"
            ],
            "category":"inspire",
            "title":"Inspiring Quote of the day",
            "date":"2019-01-10",
            "id":null
         }
      ],
      "copyright":"2017-19 theysaidso.com"
   }
}]' mediaType="application/json" encoding="UTF-8"/>
					<munit-tools:variables >
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>

			<munit-tools:mock-when doc:name="Mock when Yandex Translation REST API is called" doc:id="04ed8b7d-cee8-4588-ae10-c9ef62c6822f" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="HTTP GET Yandex Translation REST API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:UNAUTHORIZED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="quote-of-the-day:\process-quote:flow" doc:id="38443a04-b8a7-4e1a-ae66-d72ea1360f81" name="quote-of-the-day:\process-quote:flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that error message equals expected" doc:id="00931375-e180-499a-aa71-05a39acf4022" expression="#[payload.message]" is='#[MunitTools::equalTo("Translation request unauthorized. Please check if apikey used is still valid.")]'/>
		</munit:validation>
	</munit:test>

	<munit:test name="HttpConnectivityExceptionTranslatorApiCallTest" description="MUnit Test" doc:id="c48085c0-faea-470e-bfb5-c55589efd054" >
		<munit:behavior >
					<munit-tools:mock-when doc:name="Mock when qotd service is called" doc:id="31836b08-e13f-4f7e-8a83-578a6e48758d" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="HTTP GET Quote Of The Day" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0
output application/json
---
{
   "success":{
      "total":1
   },
   "contents":{
      "quotes":[
         {
            "quote":"Do not let what you cannot do interfere with what you can do",
            "author":"John Wooden",
            "length":"179",
            "tags":[
               "barriers",
               "inspire",
               "sports"
            ],
            "category":"inspire",
            "title":"Inspiring Quote of the day",
            "date":"2019-01-10",
            "id":null
         }
      ],
      "copyright":"2017-19 theysaidso.com"
   }
}]' mediaType="application/json" encoding="UTF-8"/>
					<munit-tools:variables >
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>

			<munit-tools:mock-when doc:name="Mock when Yandex Translation REST API is called" doc:id="862f7777-234d-4088-b074-b98d82419ec1" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="HTTP GET Yandex Translation REST API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="quote-of-the-day:\process-quote:flow" doc:id="22a23fb6-6f53-42b6-8544-077811d81ec0" name="quote-of-the-day:\process-quote:flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that error message equals expected" doc:id="1f952637-bb3b-439d-bb9d-ef2a3b60b520" expression="#[payload.message]" is='#[MunitTools::equalTo("Translator service cannot be reached! Please try again later.")]'/>
		</munit:validation>
	</munit:test>
</mule>
